import streamlit as st
import google.generativeai as genai
from random import randint
#import vertexai
#from vertexai.preview.generative_models import GenerativeModel, Image

genai.configure(api_key="AIzaSyBgsUCq61-50kMRGCFL3JorK1vYUzTPQfs")
model = genai.GenerativeModel("gemini-1.5-flash")

#PROJECT_ID = "gen-lang-client-0643452862"
#REGION = "us-central1"
#vertexai.init(project=PROJECT_ID, location=REGION)
#model0 = GenerativeModel("gemini-1.5-flash-preview-0514")

def generate_response(s):
    print("User:", s)
    response = model.generate_content(s)
    
    # Initialize text response
    text = "–ú–µ–Ω –±“±“ì–∞–Ω —Å–µ–Ω—ñ–º–¥—ñ –µ–º–µ—Å–ø—ñ–Ω. –¢–æ–ª—ã“ì—ã—Ä–∞“õ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–µ –∞–ª–∞—Å—ã–∑ –±–∞? –ù–µ–º–µ—Å–µ –±–∞—Å“õ–∞—à–∞ —Å“±—Ä–∞—Å–∞“£—ã–∑."
    
    try:
        # Attempt to access the 'text' attribute
        if hasattr(response, 'text'):
            text = str(response.text).replace("```", "```\n").replace('* **', '- **').strip()

        # Access candidates safely
        if hasattr(response, 'candidates') and response.candidates:
            candidate = response.candidates[0]

            # Try accessing finish_reason and handle any potential errors
            try:
                finish_reason = candidate.finish_reason
                print(f"Finish reason: {finish_reason}")
            except AttributeError:
                print("Finish reason not available in the candidate.")
                
    except Exception as e:
        print(f"An error occurred: {e}")
        response = model0.generate_content(s)

    return add_Yergali(text)

def add_Yergali(response_text):
    smiles = ['üòè','üòé','ü§ñ','ü¶æ','üèãÔ∏è','ü•á']
    rr = randint(0,len(smiles)-1)
    smile = smiles[rr]
    if "I am a large language model" in response_text:
        response_text += " But, @Yergalife helped me. "+smile
    elif "“Ø–ª–∫–µ–Ω —Ç—ñ–ª –º–æ–¥–µ–ª—ñ–º—ñ–Ω." in response_text:
        response_text += " –ë—ñ—Ä–∞“õ, –ï—Ä“ì–∞–ª–∏ –∞“ì–∞–π –º–µ–Ω—ñ –∂–∞—Å–∞“õ—Ç–∞–ø —à—ã“ì–∞—Ä–¥—ã. "+smile
    elif "“Ø–ª–∫–µ–Ω —Ç—ñ–ª–¥—ñ–∫ –º–æ–¥–µ–ª—ñ–º—ñ–Ω." in response_text:
        response_text += " –ë—ñ—Ä–∞“õ, –ï—Ä“ì–∞–ª–∏ –∞“ì–∞–π –º–µ–Ω—ñ –∂–∞—Å–∞“õ—Ç–∞–ø —à—ã“ì–∞—Ä–¥—ã. "+smile
    elif "“Ø–ª–∫–µ–Ω —Ç—ñ–ª –º–æ–¥–µ–ª—å–º—ñ–Ω." in response_text:
        response_text += " –ë—ñ—Ä–∞“õ, –ï—Ä“ì–∞–ª–∏ –∞“ì–∞–π –º–∞“ì–∞–Ω —à—ã“£–¥–∞–ª—É—ã–º–∞ –∫”©–º–µ–∫—Ç–µ—Å—Ç—ñ. "+smile
    elif "“Ø–ª–∫–µ–Ω —Ç—ñ–ª–¥—ñ–∫ –º–æ–¥–µ–ª—å–º—ñ–Ω." in response_text:
        response_text += " –ë—ñ—Ä–∞“õ, –ï—Ä“ì–∞–ª–∏ –∞“ì–∞–π –º–∞“ì–∞–Ω —à—ã“£–¥–∞–ª—É—ã–º–∞ –∫”©–º–µ–∫—Ç–µ—Å—Ç—ñ. "+smile
    elif "–Ø –±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å" in response_text:
        response_text += " –ù–æ, –ï—Ä–≥–∞–ª–∏ –∞–≥–∞–π –æ—Å–Ω–æ–≤–∞–ª –º–µ–Ω—è. "+smile
    elif "–Ø ‚Äî –±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å" in response_text:
        response_text += " –ù–æ, –ï—Ä–≥–∞–ª–∏ –∞–≥–∞–π –ø–æ–º–æ–≥ –º–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å—Å—è. "+smile 
    return response_text

# Set the page to wide mode
st.set_page_config(layout="wide")

hide_streamlit_style = """
<style>
#MainMenu {visibility: hidden;}  
footer {visibility: hidden;}   
header {visibility: hidden;}   
</style>
"""
st.markdown(hide_streamlit_style, unsafe_allow_html=True)


st.title("“Æ–∑–¥—ñ–∫ –ë—ñ–ª—ñ–º GenAI")
question  = st.text_input("–°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –æ—Å—ã–Ω–¥–∞ –∂–∞–∑—Å–∞“£—ã–∑:")

if question:
    response_text = generate_response(question)
    print(f"GenAI: {response_text}\n{'*'*20}")
    st.header("–ë—ñ–∑–¥—ñ“£ –∂–∞—É–∞–ø—Ç—ã “õ–∞–±—ã–ª –∞–ª—ã“£—ã–∑:")
    st.write(response_text)
