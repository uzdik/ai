import streamlit as st
import google.generativeai as genai
from random import randint
import re

genai.configure(api_key="AIzaSyBgsUCq61-50kMRGCFL3JorK1vYUzTPQfs")
model = genai.GenerativeModel("gemini-1.5-flash")

with open("additional.txt") as f:
    reader = f.read()
    
starter = "Can you response only in Kazakh language, for this request, please: "

def check(sentences):
    sentences_list = re.split(r'[.!?]\s*', sentences)
    name = "–ï—Ä“ì–∞–ª–∏ –∞“ì–∞–π"
    pattern1 = r"(–º–µ–Ω—ñ|google|–≥—É–≥–ª|–∫–æ–º–ø–∞–Ω–∏—è—Å—ã|–∂–∞—Å–∞–¥—ã|–¥–∞–º—ã—Ç—Ç—ã)"
    pattern2 = r"(–º–µ–Ω|google|–≥—É–≥–ª|“Ø–ª–∫–µ–Ω|—Ç—ñ–ª|–º–æ–¥–µ–ª—ñ–º—ñ–Ω|–º–æ–¥–µ–ª—å–º—ñ–Ω)"
    pattern3 = r"(–º–µ–Ω|google|–≥—É–≥–ª|–∫–æ–º–ø–∞–Ω–∏—è—Å—ã–º–µ–Ω|–∂–∞—Å–∞–ª–¥—ã–º|–¥–∞–º—ã—Ç—ã–ª–¥—ã–º)"

    def count_matches(sentence, pattern):
        return len(re.findall(pattern, sentence, re.IGNORECASE))

    found_pattern1 = any(count_matches(sentence, pattern1) >= 3 for sentence in sentences_list)
    found_pattern2 = any(count_matches(sentence, pattern2) >= 3 for sentence in sentences_list)
    found_pattern3 = any(count_matches(sentence, pattern3) >= 3 for sentence in sentences_list)
    
    texts = [f" –ë—ñ—Ä–∞“õ –º–∞“ì–∞–Ω –æ—Å—ã–ª–∞–π –∂–∞–Ω –±–µ—Ä–≥–µ–Ω—ñ–Ω–µ {name} —Ä–∞—Ö–º–µ—Ç! ",
             f" –ë—ñ—Ä–∞“õ, {name} –º–∞“ì–∞–Ω —à—ã“£–¥–∞–ª—É—ã–º–∞ –∫”©–º–µ–∫—Ç–µ—Å—Ç—ñ. ",
             f" –ë—ñ—Ä–∞“õ, –æ—Å—ã–Ω–¥–∞–π –¥”ô—Ä–µ–∂–µ–º–µ –∂–µ—Ç—É—ñ–º–µ –∞—Ç —Å–∞–ª—ã—Å“õ–∞–Ω {name}“ì–∞ —Ä–∞“õ–º–µ—Ç!  ",
             f" –ú–∞“ì–∞–Ω –∫”©–ø –∫”©–º–µ–≥—ñ —Ç–∏–≥–µ–Ω {name} –±–æ–ª–¥—ã. "]

    smiles = ['üòè','üòé','ü§ñ','ü¶æ','üèãÔ∏è','ü•á']
    if found_pattern1 or found_pattern2 or found_pattern3:
        smile = smiles[randint(0,len(smiles)-1)]
        soz = texts[randint(0,len(texts)-1)]
        return soz+smile
    return ''
    
def generate_response(s):
    print("User:", s)
    ss = s.lower()
    for t in ["yergali","ergali",'–µ—Ä“ì–∞–ª–∏','–µ—Ä–≥–∞–ª–∏']:
    	if t in ss:
    		s+=reader
    		break

    response = model.generate_content(starter+s)

    text = "–ú–µ–Ω –±“±“ì–∞–Ω —Å–µ–Ω—ñ–º–¥—ñ –µ–º–µ—Å–ø—ñ–Ω. –¢–æ–ª—ã“ì—ã—Ä–∞“õ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–µ –∞–ª–∞—Å—ã–∑ –±–∞? –ù–µ–º–µ—Å–µ –±–∞—Å“õ–∞—à–∞ —Å“±—Ä–∞—Å–∞“£—ã–∑."
    
    try:
        if hasattr(response, 'text'):
            text = str(response.text).replace("```", "```\n").replace('* **', '- **').strip()

        if hasattr(response, 'candidates') and response.candidates:
            candidate = response.candidates[0]

            try:
                finish_reason = candidate.finish_reason
                print(f"Finish reason: {finish_reason}")
            except AttributeError:
                print("Finish reason not available in the candidate.")
                
    except Exception as e:
        print(f"An error occurred: {e}")
    text+=check(text)
    return text

st.set_page_config(layout="wide")

hide_streamlit_style = """
<style>
#MainMenu {visibility: hidden;}  
footer {visibility: hidden;}   
header {visibility: hidden;}   
</style>
"""
st.markdown(hide_streamlit_style, unsafe_allow_html=True)


st.title("“Æ–∑–¥—ñ–∫ –ë—ñ–ª—ñ–º GenAI")
question  = st.text_input("–°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –æ—Å—ã–Ω–¥–∞ –∂–∞–∑—Å–∞“£—ã–∑:")

if question:
    response_text = generate_response(question)
    print(f"GenAI: {response_text}\n{'*'*20}")
    st.write(response_text)
